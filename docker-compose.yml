version: '3.9'

services:
  nginx:
    container_name: nginx
    image: nginx:stable-alpine3.19-perl
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './nginx/nginx.conf:/etc/nginx/nginx.conf'
      - './nginx/index.html:/usr/share/nginx/html/index.html'
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
      - user_db
      - configuration-server
      - discovery-server
      - user-service
      - notification-service
      - auth-service
    networks:
      - api

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
      - zookeeper_secrets:/etc/zookeeper/secrets
    networks:
      - api

  kafka:
    image: confluentinc/cp-kafka:7.6.2
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9092"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_secrets:/etc/kafka/secrets
    networks:
      - api

  user_db:
    container_name: user_db
    image: 'postgres:14.3-alpine'
    environment:
      POSTGRES_PASSWORD: "root"
      POSTGRES_USER: "admin"
      POSTGRES_DB: "user_db"
    ports:
      - "5432:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d user_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 3G
    networks:
      - api


  pg_admin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: "ruslanishmaev03@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "root"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - api


  discovery-server:
    container_name: discovery-server
    restart: unless-stopped
    image: discovery-server:latest
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - api


  configuration-server:
    container_name: configuration-server
    restart: unless-stopped
    image: configuration-server:latest
    ports:
     - "9297:9297"
    depends_on:
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - api

  user-service:
    container_name: user-service
    restart: unless-stopped
    image: user-service:latest
    ports:
      - "9002:9002"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - configuration-server
      - discovery-server
      - user_db
      - kafka
    networks:
      - api

  notification-service:
    container_name: notification-service
    restart: unless-stopped
    image: notification-service:latest
    ports:
      - "8222:8222"
    environment:
      - SPRING_PROFILES_ACTIVE=docker, secrets
    depends_on:
      - configuration-server
      - discovery-server
      - kafka
    networks:
      - api

  auth-service:
    container_name: auth-service
    restart: unless-stopped
    image: auth-service:latest
    ports:
      - "9001:9001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - configuration-server
      - discovery-server
    networks:
      - api


volumes:
  user_db_data:
  pgadmin_data:

  kafka_data:
  kafka_secrets:

  zookeeper_data:
  zookeeper_log:
  zookeeper_secrets:



networks:
  api: